import React, { useEffect, useState  } from 'react'
import {useParams} from 'react-router-dom'
import api from '../components/axios'

const EditPost = (props) => {
const {
  handleEdit, 
  editProdName, 
  setEditProdName,
  editProdCode, 
  setEditProdCode,
  editProdBarcode, 
  setEditProdBarcode,
  editProdCategory, 
  setEditProdCategory, 
  editProdPrice, 
  setEditProdPrice,
  editProdImage,
  setEditProdImage
} = props;
const [products, setProducts] = useState([])
 
useEffect(() =>{
  const fetchProducts = async () => {
   const results = await api.get('/product/')
   setProducts(await results.data)
  }

  fetchProducts();
}, [])

const {data} = products;


console.log(data)
const { id } = useParams();


const obj = data?.find(x => (x.id.toString()=== id))

useEffect(()=>{
if (prod){
    setEditProdName(prod.name);
    setEditProdBarcode(prod.barcode);
    setEditProdCode(prod.code);
    setEditProdCategory(prod.category);
    setEditProdPrice(prod.price);
    setEditProdImage(prod.image);
}
}, [ 
    prod,
    setEditProdName,
    setEditProdBarcode,
    setEditProdCode,
    setEditProdCategory,
    setEditProdPrice,
    setEditProdImage
])

  return (
    
      <div className="products flex m-0">
      <form className='productForm capitalize text-md font-semibold  w-full rounded'  onSubmit={(e)=> e.preventDefault()} >
           <div className="divider flex w-full gap-1 m-2 ">
            <div className='forminfo'>

       
            <div className="br">
              <div className="col">
             <label htmlFor="name">name</label> 
             <input autofocus className='formInput' type="text" name="barcode" id="barcode"  
             value={editProdName}
             onChange={((e) => setEditProdName(e.target.value))}
             />
             </div>

             <div className="col">
             <label htmlFor="name">code</label> 
             <input className='formInput' type="number" name="category" id="category" 
             value={editProdCode}
             onChange={(e) => setEditProdCode(e.target.value)}
             />
            </div>


            </div>
            <div className="br">
            <div className="col">
             <label htmlFor="name">Barcode</label> 
             <input autofocus className='formInput' type="text" name="barcode" id="barcode"  
             value={editProdBarcode}
             onChange={((e) => setEditProdBarcode(e.target.value))}
             />
             </div>

             <div className="col">
             <label htmlFor="name">category</label> 
             <input className='formInput' type="text" name="category" id="category" 
             value={editProdCategory}
             onChange={(e) => setEditProdCategory(e.target.value)}
             />
            </div>
            </div>

            <div className="br">
              <div className="col">
             <label htmlFor="name">Price</label> 
             <input className='formInput' type="number" name="price" id="price"
             value={editProdPrice}
             onChange={(e) => setEditProdPrice(e.target.value)}
             />
             </div>

             <div className="col">
             <label htmlFor="name">quantity</label> 
             <input className='formInput' type="number" name="quantity" id="quantity" />
             </div>
            </div>


             <br />
             <button className='formInput' type="submit" name="submit" value='Add' id="submit" 
             onClick={()=>handleEdit(prod.id)}
             >
              Add
             </button>
              
              </div>
              <div className='cProductImg w-72 h-60 shadow-md rounded-xl flex flex-col justify-center text-center items-center '>
              
              <div>
              <input placeholder='add image here' type="file" name="" id=""  className=' m-4 w-full flex items-center  text-xs' 
               value={editProdImage}
               onChange={(e) => setEditProdImage(e.target.value)
              }
              
              />
                
              </div>
              </div>
              </div>
           
          </form>

      </div>
      
  )
}

export default EditPost



var axios = require('axios');

var config = {
  method: 'post',
  url: 'http://ohisstores.pgis.org.ng/api/product',
  headers: { 
    'Accept': 'application/json', 
    'Authorization': 'Bearer 8|fNyXf9HI8sHk8BrF1LwbKa70XqscqZV7ZSGuGDIJ'
  }
};

axios(config)
.then(function (response) {
  console.log(JSON.stringify(response.data));
})
.catch(function (error) {
  console.log(error);
});

























import { axiosPrivate } from "../api/axios";
import { useEffect } from "react";
import useRefreshToken from "./useRefreshToken";
import useAuth from "./useAuth";

const useAxiosPrivate = () => {
    const refresh = useRefreshToken();
    const { auth } = useAuth();

    useEffect(() => {

        const requestIntercept = axiosPrivate.interceptors.request.use(
            config => {
                if (!config.headers['Authorization']) {
                    config.headers['Authorization'] = `Bearer ${auth?.accessToken}`;
                }
                return config;
            }, (error) => Promise.reject(error)
        );

        const responseIntercept = axiosPrivate.interceptors.response.use(
            response => response,
            async (error) => {
                const prevRequest = error?.config;
                if (error?.response?.status === 403 && !prevRequest?.sent) {
                    prevRequest.sent = true;
                    const newAccessToken = await refresh();
                    prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
                    return axiosPrivate(prevRequest);
                }
                return Promise.reject(error);
            }
        );

        return () => {
            axiosPrivate.interceptors.request.eject(requestIntercept);
            axiosPrivate.interceptors.response.eject(responseIntercept);
        }
    }, [auth, refresh])

    return axiosPrivate;
}

export default useAxiosPrivate;